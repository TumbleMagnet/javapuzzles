package be.rouget.puzzles.adventofcode.year2023.day04;

import be.rouget.puzzles.adventofcode.util.SolverUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;


public class Scratchcards {

    private static final Logger LOG = LogManager.getLogger(Scratchcards.class);
    private final List<Card> cards;

    @SuppressWarnings("java:S2629")
    public static void main(String[] args) {
        List<String> input = SolverUtils.readInput(Scratchcards.class);
        Scratchcards aoc = new Scratchcards(input);
        LOG.info("Result for part 1 is: {}", aoc.computeResultForPart1());
        LOG.info("Result for part 2 is: {}", aoc.computeResultForPart2());
    }

    public Scratchcards(List<String> input) {
        LOG.info("Input has {} lines...", input.size());
        cards = input.stream().map(Card::parse).toList();
    }

    public long computeResultForPart1() {
        return cards.stream()
                .mapToInt(Card::computePoints)
                .sum();
    }
    
    public long computeResultForPart2() {
        
        // Build initial list of cards with their quantity
        List<CardCopies> cardCopies = cards.stream()
                .map(CardCopies::fromOriginalCard)
                .collect(Collectors.toCollection(ArrayList::new)); // We want the list to be mutable 

        // Process all cards in order, taking into account copies
        for (int i = 0; i < cards.size(); i++) {
            
            CardCopies currentCopies = cardCopies.get(i);
            int numberOfNewCards = currentCopies.original().countWinningNumbersOnCard();
            
            // Only go as far as end of deck
            numberOfNewCards = Math.min(numberOfNewCards, cards.size() - 1 - i);
            
            // Add copies generated by the current card (and its copies)
            for (int j = 0; j < numberOfNewCards; j++) {
                int targetIndex = i + j + 1;
                CardCopies targetCopies = cardCopies.get(targetIndex);
                cardCopies.set(targetIndex, targetCopies.addCopies(currentCopies.quantity()));
            }
        }

        // Count all cards
        return cardCopies.stream()
                .mapToInt(CardCopies::quantity)
                .sum();
    }
}